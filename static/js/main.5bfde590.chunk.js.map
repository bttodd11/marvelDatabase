{"version":3,"sources":["component/title/img/humanTorch.svg","component/notfound/img/notFound.png","component/preload/img/loader.png","component/logo/img/marvelLogo.png","component/title/Title.js","component/notfound/notfound.js","component/preload/preload.js","component/logo/logo.js","component/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","href","src","logo","width","height","alt","React","Component","NotFound","props","notFoundImage","PreLoader","preLogo","Logo","marvelLogo","search","handleChange","event","setState","basicAddon1","target","value","state","data","foundSearch","url","loaded","notFound","searchChar","bind","this","toLowerCase","offsetLimit","searchIndex","charAt","newUrl","replace","index","fetch","response","json","console","log","charName","results","length","name","push","API","Container","Row","map","char","Col","md","thumbnail","path","description","comics","available","InputGroup","Prepend","Text","id","FormControl","ref","input","placeholder","aria-label","aria-describedby","onChange","Button","onClick","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bfde590.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/humanTorch.d2e5710d.svg\";","module.exports = __webpack_public_path__ + \"static/media/notFound.9c895778.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.a4499a16.png\";","module.exports = __webpack_public_path__ + \"static/media/marvelLogo.ce46b0ef.png\";","import React from \"react\";\nimport './Title.css';\nimport logo from './img/humanTorch.svg'\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div>\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n      <img src={logo} width=\"1\" height=\"45\" className=\"d-inline-block align-left\" alt=\"\"/> Marvel Database\n       \n     </a>\n     <a className=\"navInfo\">“Just because something works, doesn’t mean it can’t be improved.”</a>\n    </nav>\n      </div>\n    )\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport notFoundImage from './img/notFound.png'\nimport './notfound.css';\n\nclass NotFound extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    };\n\n\n  render() {\n    return (\n      <div className=\"searchBar\">\n        <div>\n          <div>\n            <button className=\"buttonLoad\">\n            <img src={notFoundImage} className=\"notFoundImage\" alt=\"Logo\" />\n              <p className=\"preLoader\"> Character  Not Found </p>\n            </button>\n          </div>\n        </div>\n      </div>\n        )\n  }\n}\nexport default NotFound;\n","import React    from \"react\";\nimport  \"./preload.css\";\nimport preLogo from '../preload/img/loader.png'\n\nclass PreLoader extends React.Component {\n\n    constructor(props) {\n      super(props);\n      };\n\n\n  render() {\n    return(\n    <div className=\"searchBar\">\n    <div>\n      <div>\n        <button className=\"buttonLoad\">\n          {<img src={preLogo} className='preLogo' />}\n          <br />\n          <p className=\"preLoader\">Searching Database</p>\n        </button>\n      </div>\n    </div>\n  </div>\n  )\n  }\n}\n\nexport default PreLoader;\n","import React from \"react\";\nimport marvelLogo from './img/marvelLogo.png'\nimport './logo.css';\n\n\n\n\nclass Logo extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <img src={marvelLogo} className=\"marvelLogo\" alt=\"Logo\" />\n    )\n  }\n}\n\nexport default Logo;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './Search.css';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport NotFound from '../notfound/notfound.js';\nimport PreLoader from '../preload/preload.js';\nimport Logo from '../logo/logo.js'\n\n\n\nclass search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basicAddon1: null,\n      data: null,\n      foundSearch: [],\n      url: null,\n      loaded: false,\n      notFound: false,\n      logo: true,\n    };\n    this.searchChar = this.searchChar.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async searchChar() {\n\n\n    this.setState({\n      loaded: true,\n      logo: false,\n    })\n\n\n    let value = this.state.basicAddon1.toLowerCase();\n    const foundSearch = [];\n    const url = this.state.url;\n    const offsetLimit = 5;\n    const searchIndex = value.charAt(0)\n\n    let newUrl = url.replace(\"tempKey\", searchIndex);\n\n\n    \n\n\n\n    for (let index = 0; index < offsetLimit; index++) {\n      const response = await fetch(newUrl + index * 100)\n      const data = await response.json();\n      console.log(data)\n\n\n      for (let charName = 0; charName < data.data.results.length; charName++) {\n        let character = data.data.results[charName].name.toLowerCase().replace(/[\\W]/g, \"\");\n\n        if (character === value.replace(/[\\W]/g, \"\")) {\n          foundSearch.push(data.data.results[charName]);\n          console.log(data.data.results[charName])\n          this.setState({\n            foundSearch: foundSearch,\n            loaded: false,\n          })\n          return;\n        }\n      }\n    }\n    this.setState({\n      notFound: true,\n      loaded: false,\n    })\n  }\n\n\n  handleChange = (event) => {\n    this.setState({\n      basicAddon1: event.target.value\n    });\n  }\n\n\n\n  componentDidMount() {\n\n    const API = 'https://gateway.marvel.com/v1/public/characters?nameStartsWith=';\n    const key = 'tempKey&';\n    const pubKey = 'd3c4d49ca5140158b141102b27d684ae&';\n    const hash = '9674d68e3057ba20fef81d98f535e7eb&limit=100';\n    const date = '1&';\n    const limit = '&limit=' + 100;\n\n    let url = API + key + 'ts=' + date + 'apikey=' + pubKey + 'hash=' + hash + limit + '&offset='\n\n    this.setState({\n      url: url,\n    })\n  }\n\n\n\n  render() {\n    const { foundSearch } = this.state;\n    const { logo } = this.state;\n\n    if (this.state.loaded || !this.state.foundSearch) {\n      return (\n        <PreLoader /> \n      )\n    }\n    else if (this.state.notFound) {\n      return (\n        <NotFound />\n      )\n    }\n  \n    else if (this.state.foundSearch) {\n      return (\n        <div className=\"searchBar\">\n          {this.state.logo ? <Logo /> : null}\n          <form>\n            <div>\n              <Container>\n                <Row>\n                  {foundSearch.map(char =>\n                    (<Col md=\"12\">\n                      <p className=\"charName\">{char.name} </p>\n                      {<img src={char.thumbnail.path + \"/detail.jpg\"} />}\n                      {\"\\n\"}\n                      <p className=\"charDetails\"> {char.description} </p>\n                      <br />\n                      <p className=\"charDetails\"> {char.name}  has appeared in {char.comics.available} different Marvel comics. </p>\n\n                    </Col>))}\n                </Row>\n              </Container>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Character Search</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl ref={this.input}\n                  placeholder=\"Character Name\"\n                  aria-label=\"Character Name\"\n                  aria-describedby=\"basic-addon1\"\n                  onChange={this.handleChange}\n\n                  value={this.state.basicAddon1 ? this.state.basicAddon1 : \"\"}\n                />\n              </InputGroup>\n              <Button onClick={this.searchChar} variant=\"outline-danger\">Search</Button>\n            </div>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n\n\n\nexport default search;","import React from 'react';\nimport './App.css';\nimport Title from './component/title/Title.js';\nimport Search from './component/search/Search.js'\n\n\n\n\n\nfunction App() {\n  return (\n  <div>\n      <Title />\n      <Search />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}